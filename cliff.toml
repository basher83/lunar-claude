# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# Changelog header - rendered once at the beginning
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""

# Template for the changelog body
# Available variables:
# - version: Tag version (e.g., "v1.0.0")
# - commits: Array of commits in this release
# - commit_id: SHA of the release commit
# - timestamp: Release timestamp
# - previous: Previous release object
# - repository: Repository path
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits | filter(attribute="merge_commit", value=false) %}
        {%- if commit.scope %}
        - **{{ commit.scope }}**: {{ commit.message | upper_first }}\
        {%- else %}
        - {{ commit.message | upper_first }}\
        {%- endif %}\
        {% if commit.breaking %} [**BREAKING**]{% endif %}\
        {% if commit.remote.username %} by @{{ commit.remote.username }}{%- endif %}\
        {% if commit.remote.pr_number %} in [#{{ commit.remote.pr_number }}](https://github.com/basher83/lunar-claude/pull/{{ commit.remote.pr_number }}){%- endif %}
    {% endfor %}
{% endfor %}
{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
    ### New Contributors
    {% for contributor in github.contributors | filter(attribute="is_first_time", value=true) -%}
        {%- if contributor.pr_number %}
        - @{{ contributor.username }} made their first contribution in [#{{ contributor.pr_number }}](https://github.com/basher83/lunar-claude/pull/{{ contributor.pr_number }})
        {%- else %}
        - @{{ contributor.username }} made their first contribution
        {%- endif %}
    {%- endfor %}
{% endif %}\
"""

# Changelog footer - rendered once at the end
footer = """
<!-- generated by git-cliff -->
"""

# Remove leading and trailing whitespace from the template
trim = true

# Postprocessors to apply after rendering the template
postprocessors = [
  # Replace repository URLs
  { pattern = 'https://github\.com/orhun/.*', replace = "https://github.com/basher83/lunar-claude" },
]

[git]
# Enable conventional commits parsing
conventional_commits = true

# Filter out commits that are not conventional
filter_unconventional = true

# Process commits starting from oldest to newest
sort_commits = "oldest"

# Commit parsers - group commits by type and scope
# HTML comments (<!-- N -->) are used to control group ordering
commit_parsers = [
  # Breaking changes group
  { message = "^\\w+\\(.*\\)!:", group = "<!-- 0 -->🏗️ Breaking Changes" },
  { message = "^\\w+!:", group = "<!-- 0 -->🏗️ Breaking Changes" },
  { body = ".*BREAKING[- ]CHANGE.*", group = "<!-- 0 -->🏗️ Breaking Changes" },

  # Security fixes (high priority)
  { message = "^fix.*security", group = "<!-- 1 -->🔒 Security" },
  { body = ".*security", group = "<!-- 1 -->🔒 Security" },

  # Features and enhancements
  { message = "^feat", group = "<!-- 2 -->🚀 Features" },

  # Bug fixes
  { message = "^fix", group = "<!-- 3 -->🐛 Bug Fixes" },

  # Performance improvements
  { message = "^perf", group = "<!-- 4 -->⚡ Performance" },

  # Documentation changes
  { message = "^docs?", group = "<!-- 5 -->📚 Documentation" },

  # Refactoring
  { message = "^refactor", group = "<!-- 6 -->♻️ Refactor" },

  # Testing
  { message = "^test", group = "<!-- 7 -->🧪 Testing" },

  # CI/CD and build changes
  { message = "^ci", group = "<!-- 8 -->👷 CI/CD" },
  { message = "^build", group = "<!-- 8 -->👷 CI/CD" },

  # Chores and miscellaneous
  { message = "^chore", group = "<!-- 9 -->🔧 Miscellaneous" },
  { message = "^style", group = "<!-- 9 -->🔧 Miscellaneous" },

  # Skip commits that match these patterns
  { message = "^chore\\(release\\):", skip = true },
  { message = "^chore\\(deps\\):", skip = true },
  { footer = "^changelog: ?ignore", skip = true },
  { body = "^changelog: ?ignore", skip = true },
]

# Protect breaking commits from being skipped
protect_breaking_commits = true

# Commit preprocessors - manipulate commit messages before parsing
commit_preprocessors = [
  # Remove gitmoji from commit messages (UTF-8 emoji and :emoji: format)
  { pattern = ' *(:\w+:|[\p{Emoji_Presentation}\p{Extended_Pictographic}](?:\u{FE0F})?\u{200D}?) *', replace = "" },

  # Remove issue numbers from commit message (they'll be added via link_parsers)
  # This keeps the message clean while still linking to issues
  # { pattern = '\(#([0-9]+)\)', replace = "" },

  # Clean up merge commit messages
  { pattern = 'Merge pull request #([0-9]+) from.*', replace = "Merged PR #$1" },
]

# Link parsers - convert references to clickable links
link_parsers = [
  # GitHub issues and PRs
  { pattern = "#(\\d+)", href = "https://github.com/basher83/lunar-claude/issues/$1" },

  # GitHub usernames
  { pattern = "@([\\w-]+)", href = "https://github.com/$1" },
]

# Filter commits by commit message
# Only include commits that match the commit_parsers patterns
filter_commits = false

# Tag pattern to consider when generating changelog
tag_pattern = "v[0-9]+\\.[0-9]+\\.[0-9]+"

# Skip tags matching this pattern (e.g., beta releases)
# skip_tags = "v.*-beta.*"

# Ignore tags matching this pattern
# ignore_tags = ""

# Sort tags topologically (follow parent commits)
topo_order = false

[remote.github]
# GitHub repository configuration
owner = "basher83"
repo = "lunar-claude"

# GitHub token for API access (should be set via GITHUB_TOKEN env var)
# token = ""  # DO NOT hardcode tokens - use environment variable instead
