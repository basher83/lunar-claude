# Mise configuration for terraform-homelab
min_version = "2024.9.5"

[settings]
auto_install = true
not_found_auto_install = true
task_run_auto_install = true

[settings.status]
show_tools = true
show_env = false
truncate = true

[tools]
python = "3.13"
eza = "0.23.0"
fd = "10.2.0"
pre-commit = "4.3.0"
rg = "14.1.1"
git-cliff = "2.10.1"
shellcheck = "0.11.0"
uv = "0.9.5"
ruff = "0.14.3"

[env]
_.python.venv = { path = ".venv", create = true } # create the venv if it doesn't exist

# === Changelog tasks ===
[tasks.changelog]
description = "Update unreleased section of CHANGELOG.md"
run = """
set -euo pipefail
echo "üìù Updating CHANGELOG.md with unreleased changes..."

# Check if CHANGELOG.md exists
if [ ! -f CHANGELOG.md ]; then
  echo "‚ö†Ô∏è  CHANGELOG.md not found. Generating initial changelog..."
  git-cliff -o CHANGELOG.md
  echo "‚úÖ Initial CHANGELOG.md created!"
  exit 0
fi

# Regenerate the entire changelog to include new unreleased commits
git-cliff -o CHANGELOG.md
echo "‚úÖ CHANGELOG.md updated!"
"""

[tasks.changelog-bump]
description = "Bump version and update changelog for a release"
run = """
set -euo pipefail

if [ -z "${1:-}" ]; then
  echo "‚ùå Error: Version number required"
  echo ""
  echo "Usage: mise run changelog-bump <version>"
  echo "Example: mise run changelog-bump 0.1.4"
  exit 1
fi

VERSION="$1"

# Validate version format (basic semver check)
if ! echo "$VERSION" | grep -qE '^[0-9]+\\.[0-9]+\\.[0-9]+$'; then
  echo "‚ùå Error: Invalid version format. Expected: X.Y.Z (e.g., 0.1.4)"
  exit 1
fi

echo "üìù Creating release v$VERSION..."

# Generate changelog for the new version
git-cliff --tag "v$VERSION" -o CHANGELOG.md

echo "‚úÖ CHANGELOG.md updated for v$VERSION!"
echo ""
echo "Next steps:"
echo "  1. Review CHANGELOG.md"
echo "  2. Update version in .claude-plugin/marketplace.json and plugin manifests"
echo "  3. Commit changes:"
echo "     git add CHANGELOG.md .claude-plugin/ && git commit -m 'chore: release v$VERSION'"
echo "  4. Create annotated tag:"
echo "     git tag -a v$VERSION -m 'Release v$VERSION'"
echo "  5. Push to GitHub:"
echo "     git push && git push --tags"
"""

# === Hooks tasks ===
[tasks.hooks-install]
description = "Install pre-commit and infisical hooks"
run = "pre-commit install && infisical scan install --pre-commit-hook"

[tasks.pre-commit-run]
description = "Run pre-commit hooks"
run = "pre-commit run --all-files"

# === Infisical tasks ===
[tasks.infisical-scan]
description = "Scan repository for secrets and sensitive data"
run = "infisical scan"

[tasks.markdown-lint]
description = "Lint Markdown files"
run = "rumdl check ."

[tasks.markdown-fix]
description = "Fix Markdown files"
run = "rumdl fmt ."
