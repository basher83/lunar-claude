# Mise configuration for terraform-homelab
min_version = "2024.9.5"

[settings]
auto_install = true
not_found_auto_install = true
task_run_auto_install = true

[settings.status]
show_tools = true
show_env = false
truncate = true

[tools]
python = "3.13"
eza = "0.23.0"
fd = "10.2.0"
pre-commit = "4.3.0"
rg = "14.1.1"
git-cliff = "2.10.1"
shellcheck = "0.11.0"
markdownlint-cli2 = "0.18.1"
uv = "0.9.4"

[env]
_.python.venv = { path = ".venv", create = true } # create the venv if it doesn't exist

# === Changelog tasks ===
[tasks.changelog]
description = "Update unreleased section of CHANGELOG.md"
run = """
echo "üìù Updating CHANGELOG.md with unreleased changes..."
# Extract existing content after the first release heading
sed -n '/^## \\[0\\.1\\.3\\]/,$p' CHANGELOG.md > /tmp/changelog_releases.txt
# Generate new unreleased section
git-cliff --unreleased --strip header > /tmp/changelog_unreleased.txt
# Combine: header + unreleased + existing releases
head -7 CHANGELOG.md > CHANGELOG.md.new
cat /tmp/changelog_unreleased.txt >> CHANGELOG.md.new
echo "" >> CHANGELOG.md.new
cat /tmp/changelog_releases.txt >> CHANGELOG.md.new
mv CHANGELOG.md.new CHANGELOG.md
rm /tmp/changelog_unreleased.txt /tmp/changelog_releases.txt
echo "‚úÖ CHANGELOG.md updated!"
"""

[tasks.changelog-bump]
description = "Bump version and update changelog for a release"
run = """
if [ -z "$1" ]; then
  echo "Usage: mise run changelog-bump <version>"
  echo "Example: mise run changelog-bump 0.1.4"
  exit 1
fi
VERSION="$1"
echo "üìù Creating release $VERSION..."
git-cliff --tag "v$VERSION" -o CHANGELOG.md
echo "‚úÖ CHANGELOG.md updated for v$VERSION!"
echo "Next steps:"
echo "  1. Review CHANGELOG.md"
echo "  2. Update version in pyproject.toml"
echo "  3. Commit changes: git add CHANGELOG.md pyproject.toml && git commit -m 'chore: release v$VERSION'"
echo "  4. Tag release: git tag -a v$VERSION -m 'Release v$VERSION'"
echo "  5. Push: git push && git push --tags"
"""

# === Hooks tasks ===
[tasks.hooks-install]
description = "Install pre-commit and infisical hooks"
run = "pre-commit install && infisical scan install --pre-commit-hook"

[tasks.pre-commit-run]
description = "Run pre-commit hooks"
run = "pre-commit run --all-files"

# === Infisical tasks ===
[tasks.infisical-scan]
description = "Scan repository for secrets and sensitive data"
run = "infisical scan"

[tasks.markdown-lint]
description = "Lint Markdown files"
run = "markdownlint-cli2 '**/*.md'"

[tasks.markdown-fix]
description = "Fix Markdown files"
run = "markdownlint-cli2 '**/*.md' --fix"
